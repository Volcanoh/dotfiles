let mapleader=";"
filetype off
filetype plugin on 
syntax on
syntax enable
set so=25
set incsearch " 设置实时搜索功能
set wildmenu " 设置自身命令行补全
set nocompatible
set ruler " 显示光标当前位置
set number
set cursorline " 高亮显示当前行
set cursorcolumn " 高亮显示当前列
set gcr=a:block-blinkon30 " 禁止光标闪烁
set mouse-=a
set tabstop=2
set shiftwidth=2
"c++ public private
set expandtab
filetype indent on
set incsearch
set hlsearch
nmap <leader>hl :set hlsearch! hlsearch?<CR>
set foldmethod=indent 
set number " 相对行号
"set norelativenumber number " 相对行号
"au FocusLost * :set norelativenumber number
"au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber


set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'tpope/vim-repeat' "use . to repeat plugin command
"Plugin 'tpope/vim-surround' "ysiw]
"Plugin 'kien/ctrlp.vim' "<C-p> to find file
Plugin 'airblade/vim-gitgutter'
Plugin 'tacahiroy/ctrlp-funky' " <leader>fu  
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'brooth/far.vim'
"Plugin 'davidhalter/jedi-vim' 自动补全插件
Plugin 'tpope/vim-commentary' "a motion to comment [gc]
" Plugin 'thinca/vim-quickrun'
Plugin 'tyru/open-browser.vim'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'DoxygenToolkit.vim'
Plugin 'Raimondi/delimitMate' "auto add {} [] () and so on
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'ervandew/supertab'
"Plugin 'gabrielelana/awesome-terminal-fonts'
"Plugin 'vim-airline/vim-airline' "status and tabline 
"Plugin 'vim-airline/vim-airline-themes'
Plugin 'Zuckonit/vim-airline-tomato'
Plugin 'vim-scripts/CmdlineCompl.vim'
"Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'gmarik/ingretu'
"Plugin 'rainux/vim-desert-warm-256'
"Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'kshenoy/vim-signature'
"Plugin 'Yggdroot/hiPairs'
Plugin 'DfrankUtil'
Plugin 'Vimprj'
Plugin 'vim-scripts/indexer.tar.gz'
"Plugin 'vim-latex/vim-latex' " latex
Plugin 'vim-scripts/mru'
Plugin 'majutsushi/tagbar'
Plugin 'tmux-plugins/vim-tmux-focus-events'
"Plugin 'vim-scripts/toggle_maximize.vim'
call vundle#end()

noremap <leader>b ^
noremap<leader>e $
noremap<leader>a A
imap <C-h> <left>
imap <C-l> <right>
nmap <leader>q :q<CR>
nmap <leader>w :w<CR>zz
nmap <leader>fs :w<CR>zz
nmap <leader>= :call AlignAll()<CR>zz
"nnoremap <leader>t "=strftime("%d/%m/%y %H:%M:%S")<CR>P"
"noremap <Up> <Nop>
"noremap <Down> <Nop>
"noremap <Left> <Nop>
"noremap <Right> <Nop>
"swift tab
noremap <C-t>n :tabnew<CR>
noremap <C-t>l :tabnext<CR>
noremap <C-t>h :tabprevious<CR>
noremap <C-t>c :tabclose<CR>
" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" split windows hot key
" <C-w>s  horizontal spliting
" <C-w>v  vertical spliting
" <C-w>q  close one 
" <C-w><C-w> switch between windows
" <C-w>j(Or h, k, l) switch to adjacent window
noremap <C-w>- <C-w>s<CR>
noremap <C-w>\ <C-w>v<CR>

" Buffer swich
noremap <leader>bn :bn<CR>
noremap <leader>bb :bn<CR>
noremap <leader>bp :bp<CR>
noremap <leader>bpp :b#<CR>

imap fd <Esc>
vmap fd <Esc>
" Visual "{{{
syntax on                      " enable syntax
" set synmaxcol=250              " limit syntax highlighting to 128 columns
"set mousehide                 " Hide mouse after chars typed
set showmatch                 " Show matching brackets.
set matchtime=1               " Bracket blinking.
set wildmode=longest,list     " At command line, complete longest common string, then list alternatives.
set completeopt-=preview      " disable auto opening preview window
"set novisualbell              " Nowblinking
set noerrorbells              " No noise.
set vb t_vb=                  " disable any beeps or flashes on error
set laststatus=2              " always show status line.
set shortmess=atI             " shortens messages
set showcmd                   " display an incomplete command in statusline
set statusline=%<%f\          " custom statusline
set stl+=[%{&ff}]             " show fileformat
set stl+=%y%m%r%=
set stl+=%-14.(%l,%c%V%)\ %P
set foldenable                " Turn on folding
"set foldmethod=marker         " Fold on the marker
set foldlevel=100             " Don't autofold anything (but I can still fold manually)
set foldopen=block,hor,tag    " what movements open folds
set foldopen+=percent,mark
set foldopen+=quickfix
set virtualedit=block
set splitbelow
set splitright
"set list                      " display unprintable characters f12 - switches
set listchars=tab:\ ·,eol:¬
set listchars+=trail:·
set listchars+=extends:»,precedes:«
"map <silent> <F12> :set invlist<CR>
"}}}
" open help in vertical split
" au BufWinEnter {*.txt} if 'help' == &ft | wincmd H | nmap q :q<CR> | endif
" " }}}
nnoremap <leader>rs :source ~/.vimrc<CR>
nnoremap <leader>re :e ~/.vim/vimrc<CR>
nnoremap <leader>rr :e ~/.vim/readme.md<CR>
cnoremap <leader>rc :silent ! cd ~/.dotfiles/ && git commit ~/.dotfiles/vim/vimrc -v <CR>
nnoremap <leader>rp :silent ! cd ~/.dotfiles/ && git push <CR>


nnoremap <C-W>O :call MaximizeToggle()<CR>
nnoremap <C-W>o :call MaximizeToggle()<CR>
nnoremap <C-W><C-O> :call MaximizeToggle()<CR>
function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction

" open-browser
" My setting.
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

au BufReadPost        {*.cpp}                          call MaximizeToggle()
" AutoCommands " 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile {*.launch,*.xml}                                setl ft=xml
au BufRead,BufNewFile {*.go}                                          setl ft=go tabstop=2 softtabstop=2 noexpandtab smarttab
au BufRead,BufNewFile {*.coffee}                                      setl ft=coffee tabstop=2 softtabstop=2 expandtab smarttab
au BufRead,BufNewFile {Gemfile,Rakefile,*.rake,config.ru,*.rabl}      setl ft=ruby tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab
au BufRead,BufNewFile {*.local}                                       setl ft=sh
au BufRead,BufNewFile {*.md,*.mkd,*.markdown}                         setl ft=markdown
au BufRead,BufNewFile {*.scala}                                       setl ft=scala
au! BufReadPost       {COMMIT_EDITMSG,*/COMMIT_EDITMSG}               exec 'setl ft=gitcommit noml list spell' | norm 1G
au! BufWritePost      {*.snippet,*.snippets}                          call ReloadAllSnippets()
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif 


" markdown
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_autowrite = 1


" airline powerline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_poweline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
"set nocompatible
"set laststatus=2
let g:Powerline_symbols = 'fancy'
let Powerline_symbols='compatible'

"ultisnips complete 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:UltiSnipsEditSplit="vertical"
"ActivateAddons vim-snippets UltiSnips

" Doxygen
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:DoxygenToolkit_briefTag_funcName = "yes"
" for C++ style, change the '@' to '\'
let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_briefTag_pre = "@brief "
let g:DoxygenToolkit_templateParamTag_pre = "@tparam "
let g:DoxygenToolkit_paramTag_pre = "@param "
let g:DoxygenToolkit_returnTag = "@return "
let g:DoxygenToolkit_throwTag_pre = "@throw " " @exception is also valid
let g:DoxygenToolkit_fileTag = "@file "
let g:DoxygenToolkit_dateTag = "@date "
let g:DoxygenToolkit_authorTag = "@author "
let g:DoxygenToolkit_versionTag = "@version "
let g:DoxygenToolkit_blockTag = "@name "
let g:DoxygenToolkit_classTag = "@class "
let g:DoxygenToolkit_authorName = "volcanoh <huangcan@megvii.com>"
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------"
let g:DoxygenToolkit_blockFooter="--------------------------------------------------------------"
let g:DoxygenToolkit_licenseTag="GPL"
let g:doxygen_enhanced_color = 1
" C++ style
let g:DoxygenToolKit_startCommentBlock = "/// "
let g:DoxygenToolKit_interCommentBlock = "/// "

"creat doxgen comment
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>dd :Dox<CR>
map <leader>da :DoxAuthor<CR>
map <leader>dl :DoxLic<cr>
let g:load_doxygen_syntax = 1
" end----------------------------------------------------------------------------------}}}

" delimitMate mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let delimitMate_matchpairs = "(:),[:],{:},<:>"
au FileType cpp let b:delimitMate_matchpairs = "(:),[:],{:}"
au FileType vimrc b:delimitMate_matchpairs = "(:),[:],{:}"

setlocal cindent cino=j1,(0,ws,Ws " c++11 indent
set cindent cinoptions+=g0,h2

" end ----------------------------------------------------------------------------------}}}


" color theme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=dark
set t_Co=256
let g:rehash256 = 1
let g:solarized_termcolors=256
let g:molokai_original = 1
"colorscheme solarized
colorscheme molokai
let g:Powerline_colorscheme='solarized256'

" indexer
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" #############indexer##############
" 设置插件 indexer 调用 ctags 的参数
" " 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" " 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"

" NERDtrss
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd VimEnter * cd %:p:h<CR>
"map <C-n> :NERDTreeToggle<CR>
"
" ctags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:set tags+=./tags

" YouCompleteme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_server_use_vim_stdout = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_server_log_level = 'debug'
"let g:ycm_extra_conf_globlist = ['~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py']
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundles/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '~/.dotfiles/vim/ycm_extra_conf.py'
let g:ycm_warning_symbol = '⚠'
let g:ycm_error_symbol = '✗'
let g:ycm_key_list_select_completion=['space'] "// 不使用tab
let g:ycm_key_list_previous_completion=[]
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_cache_omnifunc=0
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings = 1
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 1


nnoremap <leader>ji :exec("YcmCompleter GoToInclude ")<CR>
"nnoremap <leader>jd :exec("YcmCompleter GoToDefinition ")<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>jj :exec("YcmCompleter GoToDeclaration ")<CR>
nnoremap <leader>jf :exec("YcmCompleter GoTo")<CR>
"nnoremap <leader>jc :exec("YcmCompleter ClearCompilationFlagCache")<CR>

" ctag
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" open ctag in tab/vertical split
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <leader><C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" open ctag in tab/vertical split
map <leader><C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>


" ctrlpfunky
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1

" ctrlp
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <C-p> :CtrlP<CR>
map <leader>ff :CtrlPMRU<CR>

"Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
"Press <c-f> and <c-b> to cycle between modes.
"Press <c-d> to switch to filename only search instead of full path.
"Press <c-r> to switch to regexp mode.
"Use <c-j>, <c-k> or the arrow keys to navigate the result list.
"Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
"Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
"Use <c-y> to create a new file and its parent directories.
"Use <c-z> to mark/unmark multiple files and <c-o> to open them.

let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
      \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
      \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

try
  set undodir=~/.vim/temp
  set undofile
catch
endtry

function! AlignAll()
  let cursor_save = getpos('.')
  normal! ggVG=
  call setpos('.', cursor_save)
endfunction

nmap <leader>tt :TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""
let g:rbpt_colorpairs = [                                                 
      \ [158, '#00ceb3'],                                                    
      \ [081, '#00a3ff'],                                                    
      \ [214, '#ff8d00'],                                                    
      \ [123, '#3fffc9'],                                                    
      \ [045, '#29b9ec'],                                                    
      \ [190, '#bfec29'],                                                    
      \ [208, '#ffad00'],                                                    
      \ [117, '#48bde0'],
      \]
let g:rbpt_max = 8
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

nmap <leader>y "+y
vmap <leader>y "+y
nmap <leader>pp "+p

