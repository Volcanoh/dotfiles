let mapleader=";"
filetype off
filetype plugin on 
syntax on
syntax enable

noremap <Leader>b ^
noremap<Leader>e $
noremap<Leader>a A
imap <C-h> <left>
imap <C-l> <right>
noremap <Leader>y "+y
noremap <Leader>p "+p
nmap <Leader>q :q<CR>
nmap <Leader>w :w<CR>
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap n nzz
noremap N Nzz
noremap j gjzz
noremap k gkzz
" pair
nmap <Leader>pa %
" 设置实时搜索功能
set incsearch
" 设置自身命令行补全
set wildmenu
set nocompatible
" 总是显示状态栏
"set laststatus=2
" 显示光标当前位置
"set ruler
set number
" 高亮显示当前行/列
set cursorline
set cursorcolumn
" 禁止光标闪烁
set gcr=a:block-blinkon0
set mouse-=a
set number
set tabstop=4
set shiftwidth=4
set expandtab
filetype indent on
set incsearch
set hlsearch
set foldmethod=indent 
"set foldmethod=syntax 
imap jk <Esc>
vmap jk <Esc>
" 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数
fun! ToggleFullscreen()
    call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
endf
map <silent> <F11> :call ToggleFullscreen()<CR>

" Visual "{{{
syntax on                      " enable syntax

" set synmaxcol=250              " limit syntax highlighting to 128 columns

set mouse=a "enable mouse in GUI mode
set mousehide                 " Hide mouse after chars typed

set nonumber                  " line numbers Off
set showmatch                 " Show matching brackets.
set matchtime=2               " Bracket blinking.

set wildmode=longest,list     " At command line, complete longest common string, then list alternatives.

set completeopt-=preview      " disable auto opening preview window

set novisualbell              " No blinking
set noerrorbells              " No noise.
set vb t_vb=                  " disable any beeps or flashes on error

set laststatus=2              " always show status line.
set shortmess=atI             " shortens messages
set showcmd                   " display an incomplete command in statusline

set statusline=%<%f\          " custom statusline
set stl+=[%{&ff}]             " show fileformat
set stl+=%y%m%r%=
set stl+=%-14.(%l,%c%V%)\ %P


set foldenable                " Turn on folding
set foldmethod=marker         " Fold on the marker
set foldlevel=100             " Don't autofold anything (but I can still fold manually)

set foldopen=block,hor,tag    " what movements open folds
set foldopen+=percent,mark
set foldopen+=quickfix

set virtualedit=block

set splitbelow
set splitright

set list                      " display unprintable characters f12 - switches
set listchars=tab:\ ·,eol:¬
set listchars+=trail:·
set listchars+=extends:»,precedes:«
map <silent> <F12> :set invlist<CR>
"}}}
" open help in vertical split
" au BufWinEnter {*.txt} if 'help' == &ft | wincmd H | nmap q :q<CR> | endif
" " }}}
nnoremap <leader>rs :source ~/.vimrc<CR>
nnoremap <leader>rt :tabnew ~/.vim/vimrc<CR>
"nnoremap <leader>re :e ~/.vim/vimrc<CR>
"nnoremap <leader>rd :e ~/.vim/ <CR>
nnoremap <leader>rc :silent ! cd ~/.vim/ && git commit ~/.vim/vimrc -v <CR>

" AutoCommands " {{{
au BufRead,BufNewFile {*.go}                                          setl ft=go tabstop=2 softtabstop=2 noexpandtab smarttab
au BufRead,BufNewFile {*.coffee}                                      setl ft=coffee tabstop=2 softtabstop=2 expandtab smarttab
au BufRead,BufNewFile {Gemfile,Rakefile,*.rake,config.ru,*.rabl}      setl ft=ruby tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab
au BufRead,BufNewFile {*.local}                                       setl ft=sh
au BufRead,BufNewFile {*.md,*.mkd,*.markdown}                         setl ft=markdown
au BufRead,BufNewFile {*.scala}                                       setl ft=scala
au! BufReadPost       {COMMIT_EDITMSG,*/COMMIT_EDITMSG}               exec 'setl ft=gitcommit noml list spell' | norm 1G
au! BufWritePost      {*.snippet,*.snippets}                          call ReloadAllSnippets()


set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-repeat' "use . to repeat plugin command
Plugin 'tpope/vim-surround' "ysiw]
Plugin 'tpope/vim-commentary' "a motion to comment [gc]
Plugin 'thinca/vim-quickrun'
Plugin 'tyru/open-browser.vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'DoxygenToolkit.vim'
Plugin 'Raimondi/delimitMate' "auto add {} [] () and so on
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
"Plugin 'MarcWeber/vim-addon-manager'
"Plugin 'drmingdrmer/xptemplate' " have the same useage as ultisnips
Plugin 'ervandew/supertab'
Plugin 'vimwiki/vimwiki'
Plugin 'gabrielelana/awesome-terminal-fonts'
Plugin 'vim-airline/vim-airline' "status and tabline 
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Zuckonit/vim-airline-tomato'
Plugin 'vim-scripts/CmdlineCompl.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'itchyny/calendar.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'gmarik/ingretu'
Plugin 'rainux/vim-desert-warm-256'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'kshenoy/vim-signature'
Plugin 'Yggdroot/hiPairs'
Plugin 'DfrankUtil'
Plugin 'Vimprj'
Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-latex/vim-latex' " latex
call vundle#end()


" airline powerline
" begin{{{-------------------------------------------------------------
let g:airline_poweline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
"set guifont=PowerlineSymbols\ for\ Powerline
"set nocompatible
"set laststatus=2
"let g:Powerline_symbols = 'fancy'
"let Powerline_symbols='compatible'
" end---------------------------------------------------------------}}}


"tomato 
"begin{{{----------------------------------------------------
let g:tomato#show_clock = 1
let g:tomato#show_count_down = 1
let g:tomato#remind = " \uf003 "
let g:tomato#restinfo = " \uf003 "
"end-----------------------------------------------------}}}

"ultisnips complete 
" begin{{{--------------------------------------------------------------------------------
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
let g:UltiSnipsEditSplit="vertical"
"ActivateAddons vim-snippets UltiSnips
" end--------------------------------------------------------------------------------}}}


"" Calendar-vim
"" begin {{{---------------------------------------------------------------------------
let g:calendar_time_zone = "+0000"
"" end----------------------------------------------------------------------------------}}}

" Doxygen
" begin{{{---------------------------------------------------------------------------
let g:DoxygenToolkit_briefTag_funcName = "yes"
" for C++ style, change the '@' to '\'
let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_briefTag_pre = "\\brief "
let g:DoxygenToolkit_templateParamTag_pre = "\\tparam "
let g:DoxygenToolkit_paramTag_pre = "\\param "
let g:DoxygenToolkit_returnTag = "\\return "
let g:DoxygenToolkit_throwTag_pre = "\\throw " " @exception is also valid
let g:DoxygenToolkit_fileTag = "\\file "
let g:DoxygenToolkit_dateTag = "\\date "
let g:DoxygenToolkit_authorTag = "\\author "
let g:DoxygenToolkit_versionTag = "\\version "
let g:DoxygenToolkit_blockTag = "\\name "
let g:DoxygenToolkit_classTag = "\\class "
let g:DoxygenToolkit_authorName = "volcanoh <huang.volcano@gmail.com>"
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------"
let g:DoxygenToolkit_blockFooter="--------------------------------------------------------------"
let g:DoxygenToolkit_licenseTag="GPL"
let g:doxygen_enhanced_color = 1
" C++ style
let g:DoxygenToolKit_startCommentBlock = "/// "
let g:DoxygenToolKit_interCommentBlock = "/// "
"creat doxgen comment
map <leader>dd :Dox<CR>
map <leader>da :DoxAuthor<CR>
map <leader>dl :DoxLic<cr>
let g:load_doxygen_syntax = 1
" end----------------------------------------------------------------------------------}}}

" Calendar
" begin{{{---------------------------------------------------------------------------
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1
" end--------------------------------------------------------------}}}

" git
" begin{{{--------------------------------------------------------------------------- 
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gc :Gcommit -v<CR>
nnoremap <leader>gs :Gstatus \| 7<CR>
inoremap <leader>gw <Esc><leader>gw
inoremap <leader>gc <Esc><leader>gc
inoremap <leader>gs <Esc><leader>gs
" end----------------------------------------------------------------------------------}}}

" delimitMate mappings
" begin{{{---------------------------------------------------------------------------
let delimitMate_matchpairs = "(:),[:],{:},<:>"
au FileType cpp let b:delimitMate_matchpairs = "(:),[:],{:}"
au FileType vimrc b:delimitMate_matchpairs = "(:),[:],{:}"
" end ----------------------------------------------------------------------------------}}}

"" config syntastic 
"" befin{{{---------------------------------------------------------------------------
"let g:syntastic_check_on_open=1
"let g:syntastic_cpp_include_dirs = ['/usr/include/']
"let g:syntastic_cpp_remove_include_errors = 1
"let g:syntastic_cpp_check_header = 1
"let g:syntastic_cpp_compiler = 'clang++'
"let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
""set error or warning signs
"let g:syntastic_error_symbol = '✗'
"let g:syntastic_warning_symbol = '⚠'
""whether to show balloons
"let g:syntastic_enable_balloons = 1
"" end----------------------------------------------------------------------------------}}}

" mappings for latex-box plugin
" begin{{{---------------------------------------------------------------------------
map <silent> <Leader>ls :silent !/Applications/Skim.app/Contents/SharedSupport/displayline
            \ <C-R>=line('.')<CR> "<C-R>=LatexBox_GetOutputFile()<CR>" "%:p" <CR>
autocmd filetype tex nnoremap F10 :!latexmk -pdf % 
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf = 'pdflatex --synctex=-1 -src-specials -interaction=nonstopmode $*'
" end----------------------------------------------------------------------------------}}}

" color theme
" begin{{{----------------------------------------------------------------------------------------------
set background=dark
set t_Co=256
let g:rehash256 = 1
"let g:solarized_termcolors=256
let g:molokai_original = 1
"colorscheme solarized
colorscheme molokai
let g:Powerline_colorscheme='solarized256'
" end---------------------------------------------------------------------------------------}}}

" indexer
" begin{{{---------------------------------------------------------------------------------------------------
"" #############indexer##############
" 设置插件 indexer 调用 ctags 的参数
" " 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" " 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"
" end-------------------------------------------------------------------------------------------------------}}}

" NERDtrss
" begin{{{-------------------------------------------------------------------------------------
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"map <C-n> :NERDTreeToggle<CR>
" ######ctags#################################
:set tags+=./tags
" 正向遍历同名标签
nmap <Leader>tn :tnext<CR>
" 反向遍历同名标签
nmap <Leader>tp :tprevious<CR>

" YouCompleteme
" begin{{{--------------------------------------------------------------------------------------------
let g:ycm_server_use_vim_stdout = 1
let g:ycm_confirm_extra_conf = 0
"let g:ycm_server_log_level = 'debug'
"let g:ycm_extra_conf_globlist = ['~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py']
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundlesYouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_warning_symbol = '⚠'
let g:ycm_error_symbol = '✗'
"nnoremap <leader>jd :tab split<CR>:exec("YcmCompleter GoTo ")<CR>
let g:ycm_key_list_select_completion=[] "// 不使用tab
let g:ycm_key_list_previous_completion=[]
nnoremap <leader>jd :vsp <CR>:exec("YcmCompleter GoTo ")<CR>
" end-------------------------------------------------------------------------------------}}}

" open ctag in tab/vertical split
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <leader><C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" open ctag in tab/vertical split
map <leader><C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

au BufRead,BufNewFile {*.md,*.mkd,*.markdown}  set ft=markdown

"Quickrun
" begin{{{---------------------------------------------
map <F5> :QuickRun<CR>
let g:quickrun_config = {}
let g:quickrun_config.html = {'command':'gnome-open'}
let g:quickrun_config.tex  = {'command':'pdflatex'}
let g:quickrun_config.markdown = {
  \ 'type': 'markdown/pandoc',
  \ 'cmdopt': '-s',
  \ 'outputter': 'browser'
  \ }
let g:quickrun_config.cpp = {
\   'command': 'g++',
\   'cmdopt': '-std=c++11'
\ }
" end--------------------------------------}}}


